---
- name: Exploring network plugins and filters
  ignore_errors: true
  hosts: all
  vars:
    addresses: [1.2.3.4/24, 10.0.0.0/8]
    net_mask: '{{ ansible_default_ipv4.network }}/{{ ansible_default_ipv4.netmask
      }}'
  tasks:
    - name: Print IP address
      ansible.builtin.debug:
        msg: The IP address is {{ ansible_facts['default_ipv4'] }}
    - name: Show if this is a valid IP address
      ansible.builtin.debug:
        msg: "{{ ansible_facts['default_ipv4']['address'] | ipaddr }}"
    - name: This happens if the variable does not contain a valid IP address
      ansible.builtin.debug:
        msg: "{{ ansible_facts['default_ipv4'] | ipaddr }}"
    - name: Now let's check out the netmask
      ansible.builtin.debug:
        msg: "{{ net_mask | ipaddr('netmask') }}"
    - name: The filter argument 'net' is used to convert netmask to CIDR notation
      ansible.builtin.debug:
        msg: "{{ net_mask | ipaddr('net') }}"
    - name: Host/prefix will filter out only valid host IP addresses and skip network
        addresses from a list in 1.1.1.1/24 format
      ansible.builtin.debug:
        msg: "{{ addresses | ipaddr('host/prefix') }}"
    - name: Or size to show available size in this specific network
      ansible.builtin.debug:
        msg: "{{ ansible_facts['default_ipv4']['network'] | ipaddr('size') }}"
    - name: Rewriting an IPv4 address to IPv6
      ansible.builtin.debug:
        msg: "{{ addresses | ipv4('ipv6') }}"
    - name: Or int format
      ansible.builtin.debug:
        msg: "{{ ansible_facts['default_ipv4']['address'] | ipaddr('int') }}"
    - name: And how about finding available IP addresses in a range
      ansible.builtin.debug:
        msg: "{{ '193.179.99.8/27' | ipaddr('range_usable') }}"
